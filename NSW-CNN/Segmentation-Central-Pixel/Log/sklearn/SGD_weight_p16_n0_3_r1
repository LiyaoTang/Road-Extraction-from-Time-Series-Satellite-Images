Train set: ../../Data/090085/Road_Data/motor_trunk_pri_sec_tert_uncl_track/posneg_topleft_coord_split_8_train
CV set: ../../Data/090085/Road_Data/motor_trunk_pri_sec_tert_uncl_track/posneg_topleft_coord_split_8_cv
will be saved as  sk-SGD_weight_p16_n0_3_e15_r1
will be saved into  ./Result/motor_trunk_pri_sec_tert_uncl_track/sklearn/
mem usage before data loaded: 83.9453125 MB

mu =  [ 144.71187809  191.4973748   363.63933132  368.9204473  2385.57259035
 1362.40326606  728.31018062]
mu =  [ 150.8227309   198.28994142  365.46753706  373.66751856 2370.63525823
 1356.64782764  731.00466191]
train data:
(7, 7650, 8091) (7650, 8091)
pos =  304920 neg =  21258076
cv data:
(7, 2365, 8091) (2365, 8091)
pos =  23150 neg =  782418
mem usage after data loaded: 6360.0234375 MB

SGDClassifier(alpha=0.3, average=False,
       class_weight={0: 0.014140892109797729, 1: 0.9858591078902023},
       epsilon=0.1, eta0=0.0, fit_intercept=True, l1_ratio=0.15,
       learning_rate='optimal', loss='log', max_iter=1, n_iter=None,
       n_jobs=1, penalty='l2', power_t=0.5, random_state=None,
       shuffle=False, tol=None, verbose=0, warm_start=False)
classes in classifier  [0 1] 1
mem usage after model created: 6360.0234375 MB

 balanced_acc =  0.5049462407799598 AUC =  0.5049305992040503 avg_precision =  0.029015941985583642
 balanced_acc =  0.4999961654563383 AUC =  0.49995919342732875 avg_precision =  0.028735183213916896
 balanced_acc =  0.5 AUC =  0.5 avg_precision =  0.028737487089854612
 balanced_acc =  0.5000019171338083 AUC =  0.5000019171338083 avg_precision =  0.028737594110965596
 balanced_acc =  0.5000012780892055 AUC =  0.5000012780892056 avg_precision =  0.028737558437173367
 balanced_acc =  0.5 AUC =  0.5 avg_precision =  0.028737487089854612
 balanced_acc =  0.5000006390446028 AUC =  0.5000006390446028 avg_precision =  0.028737522763469706
 balanced_acc =  0.5 AUC =  0.5 avg_precision =  0.028737487089854612
 balanced_acc =  0.4995892019780493 AUC =  0.4995892399066577 avg_precision =  0.028714572397095763
 balanced_acc =  0.504592052724277 AUC =  0.5046890542016763 avg_precision =  0.029226556060647096
 balanced_acc =  0.5055596740761004 AUC =  0.5055435481789141 avg_precision =  0.029250646472803815
 balanced_acc =  0.5 AUC =  0.5 avg_precision =  0.028737487089854612
 balanced_acc =  0.5026960293058843 AUC =  0.5026814161639152 avg_precision =  0.028907701279962703
 balanced_acc =  0.5 AUC =  0.5 avg_precision =  0.028737487089854612
 balanced_acc =  0.5 AUC =  0.5 avg_precision =  0.028737487089854612
finish
mem usage after model trained: 6503.21484375 MB

coefficient info:
shape =  (1, 448)
0.9988561093266476 -0.8184520790434503 0.0923584665605891 0.06250557157351135
On train set
true_pos  = 304920
false_pos = 21254334
true_neg  = 3742
false_neg = 0
size = 21562996
pos_recall    = 1.0
pos_precision = 0.014143346518390665
pos_F1        = 0.02789220393141767
neg_recall    = 0.0001760272190201973
neg_precision = 1.0
neg_F1        = 0.0003519924777834144
accuracy      = 0.014314430146905375
balanced_accuracy = 0.5070716732591953
On CV set
true_pos  = 23150
false_pos = 782418
true_neg  = 0
false_neg = 0
size = 805568
pos_recall    = 1.0
pos_precision = 0.028737487089854612
pos_F1        = 0.055869427235802765
neg_recall    = 0.0
neg_precision = nan
neg_F1        = nan
accuracy      = 0.028737487089854612
balanced_accuracy = nan
/localdata/u6142160/anaconda3/lib/python3.6/site-packages/h5py/__init__.py:36: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.
  from ._conv import register_converters as _register_converters
/localdata/u6142160/anaconda3/lib/python3.6/site-packages/sklearn/linear_model/base.py:340: RuntimeWarning: overflow encountered in exp
  np.exp(prob, prob)
../Metric/Metric.py:71: RuntimeWarning: invalid value encountered in long_scalars
  neg_precision = true_neg / (true_neg + false_neg)
../Metric/Metric.py:81: RuntimeWarning: invalid value encountered in long_scalars
  balanced_acc = ( (true_pos/(true_pos + false_pos)) + (true_neg/(true_neg+false_neg)) ) / 2
mem usage after prediction maps calculated: 8283.09375 MB

